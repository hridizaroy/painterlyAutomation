float fract(float input)
{
    return input - floor(input);
}

vector fract(vector input)
{
    return input - floor(input);
}

float getWhiteNoise(vector seed)
{
    return fract(sin(dot(seed, vector(12.9898, 78.233, 102.38364))) * 43758.5453123);
}

vector get3DWhiteNoise(float seed)
{
    return fract(sin(seed * vector(12.9898, 78.233, 102.38364)) * 43758.5453123);
}

color repeat_texture(
    string filename,
    float texU,
    float texV,
    float repetitions,
)
{
    float s = texU;
    float t = texV;

    s *= repetitions;
    t *= repetitions;
    
    s = fmod(s, 1.0);
    t = fmod(t, 1.0);
    
    color finalColor = texture(filename, s, t);

    return finalColor;
}


color applyStrokes(
    string strokeTextureFilepath,
    string colorTextureFilepath,
    vector rawUV,
    float seed,
    float uvMulFactor
)
{
    vector whiteNoise3D = get3DWhiteNoise(seed);
    vector uv = rawUV + whiteNoise3D;

    // Multiply
    vector mulValue = vector(uvMulFactor, uvMulFactor, uvMulFactor);
    vector scaledUV = uv * mulValue;

    // Get modulo
    vector modDivisor = vector(1.0, 1.0, 1.0);
    vector moduloVec = mod(scaledUV, modDivisor);

    // Get floor
    vector floorVec = floor(scaledUV);

    // Scale down floor values
    float floorScaleFactor = 0.1;
    vector scaledFloor = floorVec * floorScaleFactor;

    // Rotate by a random angle
    float whiteNoise = getWhiteNoise(scaledFloor);
    float angle = whiteNoise * M_2PI;

    // Axis-angle rotation about a given center
    vector axis = vector(0.0, 0.0, 1.0);
    vector center = vector(0.5, 0.5, 0.5);
    moduloVec -= center; // translate such that center is at origin
    vector rotatedUV = rotate(moduloVec, angle, axis);
    rotatedUV += center; // transform back to position

    // get brush stroke texture
    float alpha;
    color strokeTextureColor = texture(strokeTextureFilepath, rotatedUV.x, rotatedUV.y,
                    "alpha", alpha, "interp", "linear");

    // Get input color from texture
    // Get uv coordinate for center of tile
    vector textureUV = (floorVec + vector(0.5, 0.5, 0.0))/mulValue - whiteNoise3D;
    color colorTexture = texture(colorTextureFilepath, textureUV.x, 1 - textureUV.y);

    if (alpha < 0.6)
    {
        // TODO: Return 1 for subtractive color mixing?
        return color(0.0);
    }

    // TODO: Not multiplying by alpha is making us lose some detail from the stroke texture
    // But multiplying by alpha is adding unrealistic outlines to the strokes
    color finalColor = colorTexture;

    return finalColor;
}


/**
    @param acrylicFactorRaw
        clamped from 0.0 to 1.0
        0.0 means fully water color
        1.0 means fully acrylic
*/
shader painterlyPrototype(
    vector uv = vector(0.0), // Coords from UV Map
    float acrylicFactorRaw = 0.0,
    string strokeTextureFilepath = "../ShaderResources/brushStroke.png",
    string colorTextureFilepath = "../ShaderResources/colorTexture10.jpg",
    int numIterationsRaw = 15,
    float strokeScale = 0.05,
    output vector out_color = vector(0.0, 0.0, 0.0)
)
{
    // Get UV map
    // vector uv;
    // getattribute("geom:uv", uv);

    int numIterations = clamp(numIterationsRaw, 1, 100);

    float acrylicFactor = clamp(acrylicFactorRaw, 0.0, 1.0);

    float uvMulFactor = 1.0/clamp(strokeScale, 0.0, 1.0);

    color finalColor = applyStrokes(strokeTextureFilepath, colorTextureFilepath,
                                    uv, 0, uvMulFactor);
    for (int ii = 1; ii < numIterations; ii++)
    {
        color texColor = applyStrokes(strokeTextureFilepath, colorTextureFilepath,
                                    uv, ii, uvMulFactor);
        
        if (length(texColor - color(0.0)) > 0.001)
        {
            float newBlendContribution = 1.0/float(ii+1);
            float mixAlpha = acrylicFactor * (1.0 - newBlendContribution) + newBlendContribution;

            // Mix the absorbances and subtract from 1 to get final reflectance
            finalColor = vector(1.0) - mix(vector(1.0) - finalColor, vector(1.0) - texColor, mixAlpha);
        }
    }

    out_color = finalColor;
}